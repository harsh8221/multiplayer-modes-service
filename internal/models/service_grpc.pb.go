// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/service.proto

package models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MultiplayerService_GetPopularModes_FullMethodName   = "/service.MultiplayerService/GetPopularModes"
	MultiplayerService_ReportModePlaying_FullMethodName = "/service.MultiplayerService/ReportModePlaying"
)

// MultiplayerServiceClient is the client API for MultiplayerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiplayerServiceClient interface {
	GetPopularModes(ctx context.Context, in *PopularModesRequest, opts ...grpc.CallOption) (*PopularModesResponse, error)
	ReportModePlaying(ctx context.Context, in *ModePlayingRequest, opts ...grpc.CallOption) (*ModePlayingResponse, error)
}

type multiplayerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiplayerServiceClient(cc grpc.ClientConnInterface) MultiplayerServiceClient {
	return &multiplayerServiceClient{cc}
}

func (c *multiplayerServiceClient) GetPopularModes(ctx context.Context, in *PopularModesRequest, opts ...grpc.CallOption) (*PopularModesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PopularModesResponse)
	err := c.cc.Invoke(ctx, MultiplayerService_GetPopularModes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiplayerServiceClient) ReportModePlaying(ctx context.Context, in *ModePlayingRequest, opts ...grpc.CallOption) (*ModePlayingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModePlayingResponse)
	err := c.cc.Invoke(ctx, MultiplayerService_ReportModePlaying_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultiplayerServiceServer is the server API for MultiplayerService service.
// All implementations must embed UnimplementedMultiplayerServiceServer
// for forward compatibility.
type MultiplayerServiceServer interface {
	GetPopularModes(context.Context, *PopularModesRequest) (*PopularModesResponse, error)
	ReportModePlaying(context.Context, *ModePlayingRequest) (*ModePlayingResponse, error)
	mustEmbedUnimplementedMultiplayerServiceServer()
}

// UnimplementedMultiplayerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMultiplayerServiceServer struct{}

func (UnimplementedMultiplayerServiceServer) GetPopularModes(context.Context, *PopularModesRequest) (*PopularModesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPopularModes not implemented")
}
func (UnimplementedMultiplayerServiceServer) ReportModePlaying(context.Context, *ModePlayingRequest) (*ModePlayingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportModePlaying not implemented")
}
func (UnimplementedMultiplayerServiceServer) mustEmbedUnimplementedMultiplayerServiceServer() {}
func (UnimplementedMultiplayerServiceServer) testEmbeddedByValue()                            {}

// UnsafeMultiplayerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiplayerServiceServer will
// result in compilation errors.
type UnsafeMultiplayerServiceServer interface {
	mustEmbedUnimplementedMultiplayerServiceServer()
}

func RegisterMultiplayerServiceServer(s grpc.ServiceRegistrar, srv MultiplayerServiceServer) {
	// If the following call pancis, it indicates UnimplementedMultiplayerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MultiplayerService_ServiceDesc, srv)
}

func _MultiplayerService_GetPopularModes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopularModesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiplayerServiceServer).GetPopularModes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiplayerService_GetPopularModes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiplayerServiceServer).GetPopularModes(ctx, req.(*PopularModesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiplayerService_ReportModePlaying_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModePlayingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiplayerServiceServer).ReportModePlaying(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiplayerService_ReportModePlaying_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiplayerServiceServer).ReportModePlaying(ctx, req.(*ModePlayingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MultiplayerService_ServiceDesc is the grpc.ServiceDesc for MultiplayerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultiplayerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.MultiplayerService",
	HandlerType: (*MultiplayerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPopularModes",
			Handler:    _MultiplayerService_GetPopularModes_Handler,
		},
		{
			MethodName: "ReportModePlaying",
			Handler:    _MultiplayerService_ReportModePlaying_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
